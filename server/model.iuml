@startuml
!define RECTANGLE class
!define TABLE class
!define PK primary_key
!define FK foreign_key

RECTANGLE Users {
  +id: TEXT <<PK>>
  +username: TEXT
  +passKey: TEXT
}

RECTANGLE Stars {
  +id: INTEGER <<PK>>
  +imageId: TEXT <<FK imageId>>
  +starReviewCount: INTEGER
}

RECTANGLE Images {
  +id: INTEGER <<PK>>
  +userId: TEXT <<FK userId>>
  +imageLocation: TEXT
}

RECTANGLE Comments {
  +id: INTEGER <<PK>>
  +imageId: TEXT <<FK imageId>>
  +comment: TEXT
}

RECTANGLE API_GenerateAccount {
  +POST /generate-account
}

RECTANGLE API_Random {
  +POST /random
}

RECTANGLE API_ReceiveRating {
  +POST /receive-rating
}

RECTANGLE API_Upload {
  +POST /upload
}

RECTANGLE API_GetUser {
  +GET /user/[pass]
}

RECTANGLE Nuxt_Server {
  +Processes requests
}

Users --o{ Images : "has"
Images --o{ Stars : "reviews"
Images --o{ Comments : "has"

API_GenerateAccount --> Users : "Creates user"
API_GenerateAccount --> Users : "Check username availability"

API_Random --> Images : "Fetches random image locations"
API_Random --> Users : "Fetches user info"

API_ReceiveRating --> Images : "Fetch image id by src"
API_ReceiveRating --> Comments : "Add comment with image id"
API_ReceiveRating --> Stars : "Create star rating with image id"

API_Upload --> Images : "Add image with user id"
API_Upload --> Nuxt_Server : "Saves image to\nuser-photos/[userId]/\n[userId_time].webp"

API_GetUser --> Users : "Fetch user via passKey"
API_GetUser --> Images : "Fetch Images by user id"
API_GetUser --> Comments : "Fetch Comments by image id"
API_GetUser --> Stars : "Fetch star ratings by image id"

Nuxt_Server --> API_GenerateAccount : "Sends username"
Nuxt_Server --> API_Random : "Sends fetchedUserIds to be excluded\n from being fetched again"
Nuxt_Server --> API_ReceiveRating : "Sends starRating,\ncomment, imageSrc"
Nuxt_Server --> API_Upload : "Sends userId, image file"
Nuxt_Server --> API_GetUser : "PassKey parsed from URL"

@enduml
